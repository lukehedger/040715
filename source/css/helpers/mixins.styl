/**
	Mixin for when you need to create pseudo-elements with some content

	.e.g. pseudo-content: top 0px, left 0px, 100%, 100%
	.e.g. pseudo-content: bottom 0px, right: 50%, 100px, 40px
 */
pseudo-content(y, x, w = auto, h = auto)
	content: ""
	position: absolute
	{y[0]}: y[1]
	{x[0]}: x[1]
	size: w h





/**
	Create a debug border around your element using the &:after pseudo element.
 */
debug(pseudo = after)
	if $debug.index == null
		$debug.index = 0
	$color = $debug.colors[$debug.index % length($debug.colors)]

	.debug &:{pseudo}
		pseudo-content: top 0px, left 0px, 100%, 100%
		border: $debug.border solid rgba($color, .5)
		pointer-events: none
		z-index: 20000

	$debug.index = $debug.index + 1





/*
	Size mixin

	e.g. size: 20px
	e.g. size: 100% 300px
 */
size(numbers...)
	if length(numbers) > 1
		width: numbers[0]
		height: numbers[1]
	else
		width: numbers
		height: numbers




/**
	Position mixins

	e.g. absolute: top 5px left 40px
	e.g. fixed: bottom 0px right 50%
 */
absolute()
	-pos('absolute', arguments)

relative()
	-pos('relative', arguments)

fixed()
	-pos('fixed', arguments)

static()
	-pos('static', arguments)

// Position Helper
-pos(type, args)
	i = 0
	position: unquote(type)
	if args
		{args[i]}: args[i + 1] is a 'unit' ? args[i += 1] : 0
		{args[i += 1]}: args[i + 1] is a 'unit' ? args[i += 1] : 0
