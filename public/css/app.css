*,
*:after,
*:before {
  box-sizing: border-box;
}
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-weight: inherit;
  font-style: inherit;
  font-family: inherit;
  font-size: 100%;
  vertical-align: baseline;
}
body {
  line-height: 1;
  color: #000;
  background: #fff;
}
ol,
ul {
  list-style: none;
}
table {
  border-collapse: separate;
  border-spacing: 0;
  vertical-align: middle;
}
caption,
th,
td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}
a img {
  border: none;
}
html,
body {
  width: 100%;
  height: 100%;
  min-height: 100%;
}
body {
  background: #fff;
  color: #252525;
}
body {
  font-size: 14px;
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  line-height: 1.75;
}
.wrapper {
  position: relative;
  width: 100%;
  height: 100%;
  margin: 0 auto;
}
.nav {
  content: "nav :)";
}
.test {
  position: absolute;
  top: 0px;
  left: 0px;
  width: 100%;
  height: 100%;
}
.circle {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background-color: #ff7f50;
  transition: 0.5s;
}
.circle.clicked {
  background-color: #f0f8ff;
  -webkit-transform: scale(50);
      -ms-transform: scale(50);
          transform: scale(50);
}
.dg.ac {
  z-index: 999999 !important;
}
.dg .cr.function .property-name {
  width: 100%;
}
/*# sourceMappingURL=data:application/json;base64, */